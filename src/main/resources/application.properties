spring.application.name=backend

# Database Configuration
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://lapxpert-db.khoalda.dev:5432/lapxpert8?user=lapxpert&password=lapxpert!}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:3}

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:none}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jackson.serialization.fail-on-empty-beans=false

# Logging Configuration
logging.level.org.hibernate.SQL=${HIBERNATE_SQL_LOG_LEVEL:DEBUG}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${HIBERNATE_BINDER_LOG_LEVEL:TRACE}

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:hoangmlinh3@gmail.com}
spring.mail.password=${MAIL_PASSWORD:gmjypulfnyjiecxv}
spring.mail.protocol=${MAIL_PROTOCOL:smtp}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS:true}
spring.mail.properties.mail.smtp.starttls.required=${MAIL_SMTP_STARTTLS_REQUIRED:true}

# MinIO Configuration
minio.url=${MINIO_URL:https://lapxpert-storage-api.khoalda.dev}
minio.access.key=${MINIO_ACCESS_KEY:lznAoWtYPW5ddXW7mwZ6}
minio.secret.key=${MINIO_SECRET_KEY:xToXrilK2a6rC70EDyyanIFTiv8avJPnLjf7ZDp0}

# Redis Configuration - Production Optimized
# Remote Redis deployment accessed through Traefik proxy
spring.data.redis.host=${REDIS_HOST:lapxpert-redis.khoalda.dev}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.password=${REDIS_PASSWORD:}

# Production Connection Timeouts (in milliseconds)
# Increased timeouts for production network latency and reliability
spring.data.redis.timeout=${REDIS_TIMEOUT:10000}
spring.data.redis.lettuce.shutdown-timeout=${REDIS_SHUTDOWN_TIMEOUT:5000}

# Production Connection Pool Configuration
# Optimized for high-throughput production workloads
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:20}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:10}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:2}
spring.data.redis.lettuce.pool.max-wait=${REDIS_POOL_MAX_WAIT:5000}

# Cache configuration
spring.cache.type=${CACHE_TYPE:redis}
# Fallback to simple cache if Redis fails
spring.cache.cache-names=productRatings,sanPhamList,activeSanPhamList,searchResults,popularProducts,userSessions,cartData,categories,systemConfig,shippingFees

# Production TTL Configuration (in minutes) - Optimized for production data freshness
# Short-term: Frequently changing data (cart, search results, active products)
cache.ttl.short=${CACHE_TTL_SHORT:10}
# Medium-term: Moderately changing data (product ratings, user sessions)
cache.ttl.medium=${CACHE_TTL_MEDIUM:30}
# Long-term: Rarely changing data (categories, system config, popular products)
cache.ttl.long=${CACHE_TTL_LONG:720}

logging.level.org.springframework.cache=${CACHE_LOG_LEVEL:DEBUG}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:DEBUG}

# File Upload Configuration
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.enabled=true

spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.xml

# VNPay Configuration (Sandbox)
vnpay.tmn-code=${VNPAY_TMN_CODE:4FWARVVC}
vnpay.hash-secret=${VNPAY_HASH_SECRET:7UG6NK3YS9C59FYCM1F7UHOT8H2INKAP}
vnpay.pay-url=${VNPAY_PAY_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}
vnpay.api-url=${VNPAY_API_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}
vnpay.return-url=${VNPAY_RETURN_URL:/api/payment/vnpay-payment}

# MoMo Configuration (Test Environment)
momo.partner-code=${MOMO_PARTNER_CODE:MOMO}
momo.access-key=${MOMO_ACCESS_KEY:F8BBA842ECF85}
momo.secret-key=${MOMO_SECRET_KEY:K951B6PE1waDMi640xX08PD3vg6EkVlz}
momo.endpoint=${MOMO_ENDPOINT:https://test-payment.momo.vn/v2/gateway/api/create}
momo.return-url=${MOMO_RETURN_URL:/api/payment/momo-payment}
momo.notify-url=${MOMO_NOTIFY_URL:/api/payment/momo-ipn}
##Configuration for development environment
DEV_MOMO_ENDPOINT=https://test-payment.momo.vn/v2/gateway/api
DEV_ACCESS_KEY=mTCKt9W3eU1m39TW
DEV_PARTNER_CODE=MOMOLRJZ20181206
DEV_SECRET_KEY=SetA5RDnLHvt51AULf51DyauxUo3kDU6

##Configuration for production environment
PROD_MOMO_ENDPOINT=https://payment.momo.vn/v2/gateway/api
PROD_ACCESS_KEY=key
PROD_PARTNER_CODE=key
PROD_SECRET_KEY=key

## AIOv2
CREATE_URL=/create
QUERY_URL=/query
REFUND_URL=/refund
CONFIRM_URL=/confirm
TOKEN_PAY_URL=/tokenization/pay
TOKEN_BIND_URL=/tokenization/bind
TOKEN_INQUIRY_URL=/tokenization/cbQuery
TOKEN_DELETE_URL=/tokenization/delete

# VietQR Configuration
vietqr.bank-id=${VIETQR_BANK_ID:970415}
vietqr.account-no=${VIETQR_ACCOUNT_NO:113366668888}
vietqr.account-name=${VIETQR_ACCOUNT_NAME:LAPXPERT STORE}
vietqr.template=${VIETQR_TEMPLATE:compact2}
vietqr.amount=${VIETQR_AMOUNT:79000}
vietqr.description=${VIETQR_DESCRIPTION:Thanh toan don hang}
vietqr.return-url=${VIETQR_RETURN_URL:/api/payment/vietqr-payment}
vietqr.notify-url=${VIETQR_NOTIFY_URL:/api/payment/vietqr-ipn}
vietqr.client-id=${VIETQR_CLIENT_ID:}
vietqr.api-key=${VIETQR_API_KEY:}
vietqr.api-base-url=${VIETQR_API_BASE_URL:https://api.vietqr.io}

# Default Admin User Configuration (for development)
# WARNING: Change these values in production and use environment variables
app.default-admin.enabled=${DEFAULT_ADMIN_ENABLED:true}
app.default-admin.email=${DEFAULT_ADMIN_EMAIL:admin@lapxpert.com}
app.default-admin.password=${DEFAULT_ADMIN_PASSWORD:admin123456}
app.default-admin.name=${DEFAULT_ADMIN_NAME:System Administrator}
app.default-admin.phone=${DEFAULT_ADMIN_PHONE:0123456789}

# JWT Configuration
jwt.secret=${JWT_SECRET:lapxpert_secret_key_for_development_only}
jwt.expiration-hours=${JWT_EXPIRATION_HOURS:5}

# GHTK Shipping Configuration
# IMPORTANT: Requires GHTK business account registration and API token
# Register at: https://khachhang.giaohangtietkiem.vn/web
# Get API token from: https://khachhang.giaohangtietkiem.vn/web/thong-tin-shop/cau-hinh-api
ghtk.api-token=${GHTK_API_TOKEN:}
ghtk.base-url=${GHTK_BASE_URL:https://services.giaohangtietkiem.vn}
ghtk.partner-code=${GHTK_PARTNER_CODE:}
ghtk.default-deliver-option=${GHTK_DEFAULT_DELIVER_OPTION:xteam}
ghtk.default-transport=${GHTK_DEFAULT_TRANSPORT:road}
ghtk.default-pick-province=${GHTK_DEFAULT_PICK_PROVINCE:Ha Noi}
ghtk.default-pick-district=${GHTK_DEFAULT_PICK_DISTRICT:Hai Ba Trung}
ghtk.default-pick-ward=${GHTK_DEFAULT_PICK_WARD:}
ghtk.default-pick-address=${GHTK_DEFAULT_PICK_ADDRESS:}

# GHN (GiaoHangNhanh) Shipping Configuration
# IMPORTANT: Requires GHN business account registration and API token
# Register at: https://5sao.ghn.dev/
# Get API token and shop ID from GHN dashboard
ghn.api-token=${GHN_API_TOKEN:}
ghn.base-url=${GHN_BASE_URL:https://dev-online-gateway.ghn.vn}
ghn.shop-id=${GHN_SHOP_ID:}
ghn.default-service-id=${GHN_DEFAULT_SERVICE_ID:53320}
ghn.default-service-type-id=${GHN_DEFAULT_SERVICE_TYPE_ID:2}
ghn.default-from-district-id=${GHN_DEFAULT_FROM_DISTRICT_ID:1542}
ghn.default-from-ward-code=${GHN_DEFAULT_FROM_WARD_CODE:1A0107}
ghn.default-from-address=${GHN_DEFAULT_FROM_ADDRESS:}

# Shipping Provider Comparison Configuration
shipping.comparison.preferred-provider=${SHIPPING_PREFERRED_PROVIDER:GHN}
shipping.comparison.fallback-provider=${SHIPPING_FALLBACK_PROVIDER:GHTK}
shipping.comparison.cost-weight=${SHIPPING_COST_WEIGHT:0.5}
shipping.comparison.reliability-weight=${SHIPPING_RELIABILITY_WEIGHT:0.3}
shipping.comparison.speed-weight=${SHIPPING_SPEED_WEIGHT:0.2}
shipping.comparison.max-acceptable-fee=${SHIPPING_MAX_ACCEPTABLE_FEE:500000}
shipping.comparison.max-response-time-ms=${SHIPPING_MAX_RESPONSE_TIME_MS:10000}
shipping.comparison.min-reliability-score=${SHIPPING_MIN_RELIABILITY_SCORE:0.7}

# Enhanced WebSocket Configuration
# Enable/disable enhanced WebSocket features within the monolithic application
websocket.enhanced.enabled=${WEBSOCKET_ENHANCED_ENABLED:true}
websocket.enhanced.task-scheduler.pool-size=${WEBSOCKET_TASK_SCHEDULER_POOL_SIZE:4}
websocket.enhanced.connection-tracking.enabled=${WEBSOCKET_CONNECTION_TRACKING_ENABLED:true}

# Redis Pub/Sub for WebSocket Message Broadcasting
websocket.redis.pubsub.enabled=${WEBSOCKET_REDIS_PUBSUB_ENABLED:true}

# WebSocket Integration Service Configuration
websocket.integration.enabled=${WEBSOCKET_INTEGRATION_ENABLED:true}

# Jackson Configuration for Java 8 Time Support (fixes LocalDateTime serialization in Redis Pub/Sub)
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.write-dates-with-zone-id=true
spring.jackson.deserialization.fail-on-unknown-properties=false

# Spring Boot Actuator Configuration
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,metrics}
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:when-authorized}
management.endpoint.metrics.enabled=${ACTUATOR_METRICS_ENABLED:true}